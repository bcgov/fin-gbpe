# retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
{{- $secretName := printf "%s" ( .Release.Name ) }}
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
  # set below to existing secret data or generate a random one when not exists
{{- $dbpwd := (get $secretData "databasePassword") }}
{{- $superUserPassword := (get $secretData "databaseSuperUserPassword") }}
{{- $replicationPassword := (get $secretData "databaseReplicationPassword") }}
{{- if not $dbpwd }}
  {{- if .Values.global.secrets.databasePassword }}
    {{- $dbpwd = .Values.global.secrets.databasePassword | b64enc }}
  {{- else }}
    {{- $dbpwd = (randAlpha 10 | lower | b64enc) }}
  {{- end }}
{{- end }}
{{- if not $superUserPassword }}
  {{- if .Values.global.secrets.databaseSuperUserPassword }}
    {{- $superUserPassword = .Values.global.secrets.databaseSuperUserPassword | b64enc }}
  {{- else }}
    {{- $superUserPassword = (randAlpha 10 | lower | b64enc) }}
  {{- end }}
{{- end }}
{{- if not $replicationPassword }}
  {{- if .Values.global.secrets.databaseReplicationPassword }}
    {{- $replicationPassword = .Values.global.secrets.databaseReplicationPassword | b64enc }}
  {{- else }}
    {{- $replicationPassword = (randAlpha 10 | lower | b64enc) }}
  {{- end }}
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  {{- with .Values.global.secrets.annotations }}
  annotations:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  name: {{ .Release.Name }}-{{ .Values.global.zone }}
  labels: {{- include "selectorLabels" . | nindent 4 }}
data:
  databasePassword: {{ $dbpwd | quote }}
  databaseUser: {{ default "payTransparency" | b64enc | quote }}
  databaseSuperUser: {{ default "postgres" | b64enc | quote }}
  databaseReplicationUser: {{ default "payTransparencyReplication" | b64enc | quote }}
  databaseReplicationPassword: {{ $replicationPassword | quote }}
  databaseSuperUserPassword: {{ $superUserPassword | quote }}
  keycloakClientId: {{ .Values.global.secrets.keycloakClientId | b64enc | quote }}
  keycloakClientSecret: {{ .Values.global.secrets.keycloakClientSecret | b64enc | quote }}
  keycloakUrl: {{ .Values.global.secrets.keycloakUrl | b64enc | quote }}
  uiPrivateKey: {{ .Values.global.secrets.uiPrivateKey | b64enc | quote }}
  uiPublicKey: {{ .Values.global.secrets.uiPublicKey | b64enc | quote }}
