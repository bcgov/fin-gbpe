{{- $secretName := printf "%s" .Release.Name }}
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace  $secretName ) | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
  # set below to existing secret data or generate a random one when not exists
{{- $privateKey := (get $secretData "PRIVATE_KEY") | default (.Values.global.secrets.uiPrivateKey | b64enc) }}
{{- $publicKey := (get $secretData "PUBLIC_KEY") | default (.Values.global.secrets.uiPublicKey | b64enc) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}
  labels: {{- include "labels" . | nindent 4 }}
data:
  #-- set these below for plain Postgres, for crunchy it is handled by the operator, so needs to be dealt with differently.
  {{- if not .Values.global.crunchyEnabled }}
  POSTGRESQL_PASSWORD: {{ .Values.global.secrets.databasePassword | b64enc | quote }}
  POSTGRES_PASSWORD: {{ .Values.global.secrets.databasePassword | b64enc | quote }}
  POSTGRESQL_USER: {{  .Values.global.secrets.databaseUser | b64enc | quote }}
  POSTGRES_USER: {{  .Values.global.secrets.databaseUser | b64enc | quote }}
  FLYWAY_USER: {{  .Values.global.secrets.databaseUser | b64enc | quote }}
  FLYWAY_PASSWORD: {{ .Values.global.secrets.databasePassword | b64enc | quote }}
  POSTGRESQL_DATABASE: {{  .Values.global.secrets.databaseName | b64enc | quote }}
  POSTGRES_DB: {{  .Values.global.secrets.databaseName | b64enc | quote }}
  {{- end }}
  KEYCLOAK_CLIENT_ID: {{ .Values.global.secrets.keycloakClientId | b64enc | quote }}
  KEYCLOAK_CLIENT_SECRET: {{ .Values.global.secrets.keycloakClientSecret | b64enc | quote }}
  KEYCLOAK_URL: {{ .Values.global.secrets.keycloakUrl | b64enc | quote }}
  PRIVATE_KEY: {{ $privateKey | quote }}
  PUBLIC_KEY: {{ $publicKey | quote }}
  BCEID_WS_BASIC_AUTH_PASSWORD: {{ .Values.global.secrets.bceidWsAuthPassword | b64enc | quote }}
  BCEID_WS_BASIC_AUTH_USERNAME: {{ .Values.global.secrets.bceidWsAuthUserName | b64enc | quote }}
  BCEID_WS_ONLINE_SERVICE_ID: {{ .Values.global.secrets.bceidWsOnlineServiceId | b64enc | quote }}
  BCEID_WS_URL: {{ .Values.global.secrets.bceidWsUrl | b64enc | quote }}

{{- if .Values.global.crunchyEnabled }}
{{ $pgbouncerHost:= printf "%s-pgbouncer.%s.svc" .Release.Name .Release.Namespace }}
{{ $host:= printf "%s-primary.%s.svc" .Release.Name .Release.Namespace }}
{{ $uriApp:= printf "postgresql://fin-pay-transparency:%s@%s:5432/fin-pay-transparency" .Values.global.secrets.databasePassword $host }}
{{ $uriAppQuery:= urlquery $uriApp }}
{{ $uriPostgres:= printf "postgresql://postgres:%s@%s:5432/postgres" .Values.global.secrets.postgresPassword $host }}
{{ $uriPostgresQuery:= urlquery $uriPostgres }}
{{ $uriPostgresPgbouncer:= printf "postgresql://postgres:%s@%s:5432/postgres" .Values.global.secrets.postgresPassword $pgbouncerHost }}
{{ $uriPostgresPgbouncerQuery:= urlquery $uriPostgresPgbouncer }}
{{ $uriPostgresPgbouncerJdbc:= printf "jdbc:postgresql://%s:5432/postgres?password=%s&prepareThreshold=0&user=postgres" $pgbouncerHost .Values.global.secrets.postgresPassword }}
{{ $uriPostgresPgbouncerJdbcQuery:= urlquery $uriPostgresPgbouncerJdbc }}
{{ $uriPostgresJdbc:= printf "jdbc:postgresql://%s:5432/postgres?password=%s&user=postgres" $host .Values.global.secrets.postgresPassword }}
{{ $uriPostgresJdbcQuery:= urlquery $uriPostgresJdbc }}
{{ $verifier:= .Values.global.secrets.postgresSecretVerifier }}
{{ $uriAppPgbouncer:= printf "postgresql://fin-pay-transparency:%s@%s:5432/fin-pay-transparency" .Values.global.secrets.databasePassword $pgbouncerHost }}
{{ $uriAppPgbouncerQuery:= urlquery $uriAppPgbouncer }}
{{ $uriAppPgbouncerJdbc:= printf "jdbc:postgresql://%s:5432/fin-pay-transparency?password=%s&prepareThreshold=0&user=fin-pay-transparency" $pgbouncerHost .Values.global.secrets.databasePassword }}
{{ $uriAppPgbouncerJdbcQuery:= urlquery $uriAppPgbouncerJdbc }}
{{ $uriAppJdbc:= printf "jdbc:postgresql://%s:5432/fin-pay-transparency?password=%s&user=fin-pay-transparency" $host .Values.global.secrets.databasePassword }}
{{ $uriAppJdbcQuery:= urlquery $uriAppJdbc }}
{{ $verifierApp:= .Values.global.secrets.appSecretVerifier }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-pguser-postgres
  labels: {{- include "crunchyLabels.postgres" . | nindent 4 }}
data:
  port: {{ "5432" | b64enc | quote}}
  pgbouncer-host: {{ $pgbouncerHost | b64enc | quote}}
  host: {{ $host | b64enc | quote}}
  dbname: {{ "postgres" | b64enc | quote}}
  user: {{ "postgres" | b64enc | quote}}
  uri: {{ $uriPostgresQuery | b64enc | quote}}
  pgbouncer-uri: {{ $uriPostgresPgbouncerQuery | b64enc | quote}}
  pgbouncer-jdbc-uri: {{ $uriPostgresPgbouncerJdbcQuery | b64enc | quote}}
  verifier: {{ $verifier | b64enc | quote}}
  jdbc-uri: {{ $uriPostgresJdbcQuery | b64enc | quote}}
  pgbouncer-port: {{ "5432" | b64enc | quote}}
  password: {{ .Values.global.secrets.postgresPassword | b64enc | quote}}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-pguser-fin-pay-transparency
  labels: {{- include "crunchyLabels.app" . | nindent 4 }}
data:
  port: {{ "5432" | b64enc | quote}}
  pgbouncer-host: {{ $pgbouncerHost | b64enc | quote}}
  host: {{ $host | b64enc | quote}}
  dbname: {{ "fin-pay-transparency" | b64enc | quote}}
  user: {{ "fin-pay-transparency" | b64enc | quote}}
  uri: {{ $uriAppQuery | b64enc | quote}}
  pgbouncer-uri: {{ $uriAppPgbouncerQuery | b64enc | quote}}
  pgbouncer-jdbc-uri: {{ $uriAppPgbouncerJdbcQuery | b64enc | quote}}
  verifier: {{ $verifierApp | b64enc | quote}}
  jdbc-uri: {{ $uriAppJdbcQuery | b64enc | quote}}
  pgbouncer-port: {{ "5432" | b64enc | quote}}
  password: {{ .Values.global.secrets.databasePassword | b64enc | quote}}
{{- end }}
