name: create patroni secrets in (DEV,TEST,PROD) environments

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
      app-db-pwd:
        required: true
        description: 'the password for application database'
      replication-db-password:
        required: true
        description: 'the password for replication'
      superUserpassword:
        required: true
        description: 'the password for superuser'
      superuser:
        required: true
        description: 'the database superuser'
      app-db-username:
        required: true
        description: 'the user name for the application database'
      app-db-name:
        required: true
        description: 'the application specific database name'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  create-secret-dev:
    if: github.event.inputs.env == 'dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      # Runs a single command using the runners shell
      - name: Create patroni secret in openshift
        shell: bash
        run: |
          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}
          oc create secret generic patroni-secrets --from-literal=app-db-pwd=${{ github.event.inputs.app-db-pwd }} --from-literal=replication-db-password=${{ github.event.inputs.replication-db-password }} --from-literal=superUserpassword=${{ github.event.inputs.superUserpassword }} --from-literal=superuser=${{ github.event.inputs.superuser }} --from-literal=app-db-username=${{ github.event.inputs.app-db-username }} --from-literal=app-db-name=${{ github.event.inputs.app-db-name }}
  create-secret-test:
    if: github.event.inputs.env == 'test'
    runs-on: ubuntu-latest
    environment: test
    steps:
      # Runs a single command using the runners shell
      - name: Create patroni secret in openshift
        shell: bash
        run: |
          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}
          oc create secret generic patroni-secrets --from-literal=app-db-pwd=${{ github.event.inputs.app-db-pwd }} --from-literal=replication-db-password=${{ github.event.inputs.replication-db-password }} --from-literal=superUserpassword=${{ github.event.inputs.superUserpassword }} --from-literal=superuser=${{ github.event.inputs.superuser }} --from-literal=app-db-username=${{ github.event.inputs.app-db-username }} --from-literal=app-db-name=${{ github.event.inputs.app-db-name }}
  create-secret-prod:
    if: github.event.inputs.env == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      # Runs a single command using the runners shell
      - name: Create patroni secret in openshift
        shell: bash
        run: |
          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}
          oc create secret generic patroni-secrets --from-literal=app-db-pwd=${{ github.event.inputs.app-db-pwd }} --from-literal=replication-db-password=${{ github.event.inputs.replication-db-password }} --from-literal=superUserpassword=${{ github.event.inputs.superUserpassword }} --from-literal=superuser=${{ github.event.inputs.superuser }} --from-literal=app-db-username=${{ github.event.inputs.app-db-username }} --from-literal=app-db-name=${{ github.event.inputs.app-db-name }}
