name: Deploy
env:
  deployment_name: pay-transparency
on:
  workflow_call:
    inputs:
      target:
        description: 'PR number, test or prod.'
        required: true
        type: string
      autoscaling:
        description: 'Autoscaling enabled or not for the deployments'
        required: false
        type: boolean
        default: true
      tag:
        description: 'Docker tag; e.g. PR number, tag, test or prod'
        required: false
        type: string
        default: ${{ github.event.number }}

      directory:
        description: 'Chart directory.'
        default: 'charts/${{ github.event.repository.name }}'
        required: false
        type: string
      timeout-minutes:
        description: 'Timeout minutes'
        default: 8
        required: false
        type: number
      values:
        description: 'Values file.'
        default: 'values.yaml'
        required: false
        type: string

      frontend-url:
        description: 'Frontend URL of the application'
        required: true
        type: string
      environment:
        description: 'Environment to read secrets from GitHub secrets'
        required: false
        default: dev
        type: string
      semver:
        description: 'Semver version of the helm chart'
        required: false
        type: string
        default: 0.0.1
      params:
        description: 'Extra params to pass to helm upgrade command'
        required: false
        type: string
        default: ''


jobs:
  deploys:
    name: Helm
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/checkout@v4
      - name: generate private and public key
        id: generateKey
        shell: bash
        run: |
          EOF=" "
          ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key -q -N ""
          openssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub
          UI_PRIVATE_KEY_VAL=$(cat jwtRS256.key)
          UI_PUBLIC_KEY_VAL=$(cat jwtRS256.key.pub)
          echo "UI_PUBLIC_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PUBLIC_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

          echo "UI_PRIVATE_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PRIVATE_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Login to OpenShift
        shell: bash
        run: |
          # Allow pipefail, since we could be catching oc create errors
          set +o pipefail

          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}

      - name: Clean PR Environment
        shell: bash
        run: |
          
          # If inputs.target starts with 'pr-', uninstall the helm chart first to ensure a clean install
          if [[ "${{ inputs.target }}" == pr-* ]]; then
            helm uninstall ${{ env.deployment_name }}-${{ inputs.target }} || true
          fi

      - name: Package HELM Chart
        shell: bash
        run: |
          helm package -u --app-version="${{ inputs.tag }}" --version=${{ inputs.semver }} ./${{ inputs.directory }}

      - name: Deploy to OpenShift
        shell: bash
        run: |
          
          # 1 minute less for HELM to do atomic deployment and rollback if not completed within the time.
          DEPLOY_TIMEOUT=$((${{ inputs.timeout-minutes }}-1)) 
          
          # Perform atomic upgrade/installation of helm chart
          helm upgrade --debug --install --wait --atomic ${{ env.deployment_name }}-${{ inputs.target }} \
          --values ${{ inputs.directory }}/${{ inputs.values }} \
          --set-string backend.image.tag="${{ inputs.tag }}" \
          --set-string frontend.image.tag="${{ inputs.tag }}" \
          --set-string database.image.tag="${{ inputs.tag }}" \
          --set-string doc-gen-service.image.tag="${{ inputs.tag }}" \
          --set-string backend-external.image.tag="${{ inputs.tag }}" \
          --set global.autoscaling.enabled=${{ inputs.autoscaling }} \
          --set-string global.secrets.keycloakClientId="${{ secrets.KEYCLOAK_CLIENT_ID }}" \
          --set-string global.secrets.keycloakClientSecret="${{ secrets.KEYCLOAK_CLIENT_SECRET }}" \
          --set-string global.secrets.keycloakUrl="${{ secrets.KEYCLOAK_URL }}" \
          --set-string global.secrets.uiPrivateKey="${{ steps.generateKey.outputs.UI_PRIVATE_KEY }}" \
          --set-string global.secrets.uiPublicKey="${{ steps.generateKey.outputs.UI_PUBLIC_KEY }}" \
          --set-string global.secrets.databasePassword="${{ secrets.DATABASE_PWD }}" \
          --set-string global.secrets.databaseUser="${{ secrets.DATABASE_USER }}" \
          --set-string global.secrets.databaseName="${{ secrets.DATABASE_NAME }}"  \
          --set-string global.secrets.bceidWsUrl="${{ secrets.BCEID_WS_URL }}" \
          --set-string global.secrets.bceidWsAuthPassword="${{ secrets.BCEID_WS_BASIC_AUTH_PASSWORD }}" \
          --set-string global.secrets.bceidWsAuthUserName="${{ secrets.BCEID_WS_BASIC_AUTH_USERNAME }}" \
          --set-string global.secrets.bceidWsOnlineServiceId="${{ secrets.BCEID_WS_ONLINE_SERVICE_ID }}"  \
          --set-string global.secrets.externalConsumerApiKey="${{ secrets.EXTERNAL_CONSUMER_API_KEY }}"  \
          --set-string global.serverFrontend="${{ inputs.frontend-url }}" \
          --set-string crunchy.pgBackRest.s3.bucket="${{ secrets.S3_BUCKET }}"  \
          --set-string crunchy.pgBackRest.s3.endpoint="${{ secrets.S3_ENDPOINT }}"  \
          --set-string crunchy.pgBackRest.s3.accessKey="${{ secrets.S3_ACCESS_KEY }}"  \
          --set-string crunchy.pgBackRest.s3.secretKey="${{ secrets.S3_SECRET_ACCESS_KEY }}"  \
          ${{ inputs.params }} \
          --timeout "$DEPLOY_TIMEOUT"m  ./${{ github.event.repository.name }}-${{ inputs.semver }}.tgz

      - name: Print HELM Chart History
        shell: bash
        run: |
          # print history 
          helm history ${{ env.deployment_name }}-${{ inputs.target }}

