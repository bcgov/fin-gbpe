name: Merge to Main
env:
  deployment_name: pay-transparency
on:
  workflow_run:
    workflows: [ "Pull Request Closed" ]
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  codeql:
    name: Semantic Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  semantic-version: # Create a semantic version based on the commit messages and tag the commit.
    outputs:
      semanticVersion: ${{ steps.changelog.outputs.version }}
      tag: ${{ steps.changelog.outputs.tag }}
      clean_changelog: ${{ steps.changelog.outputs.clean_changelog }}
    runs-on: ubuntu-22.04
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
      - name: Conventional Changelog Update
        uses: TriPSs/conventional-changelog-action@v4
        id: changelog
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          output-file: 'CHANGELOG.md'
          skip-version-file: 'true'
          skip-commit: 'true'
          skip-on-empty: 'false'
          git-push: 'true'
  retag-images:
    needs: [ semantic-version ]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        package: [ database, backend, database-migrations, frontend ]
    steps:
      -
        name: Tag Docker Images
        uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.package }}
          target: dev
          tags: ${{ needs.semantic-version.outputs.semanticVersion }}

  deploys:
    needs: [retag-images, semantic-version]
    name: Deploys
    environment: dev
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: generate private and public key
        id: generateKey
        shell: bash
        run: |
          EOF=" "
          ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key -q -N ""
          openssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub
          UI_PRIVATE_KEY_VAL=$(cat jwtRS256.key)
          UI_PUBLIC_KEY_VAL=$(cat jwtRS256.key.pub)
          echo "UI_PUBLIC_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PUBLIC_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          
          echo "UI_PRIVATE_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PRIVATE_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Deploy to OpenShift
        shell: bash
        run: |
          # Allow pipefail, since we could be catching oc create errors
          set +o pipefail
          
          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}
          
          # Deploy Helm Chart
          helm upgrade --install --wait --atomic ${{ env.deployment_name }} \
          --values charts/fin-pay-transparency/values.yaml \
          --set-string backend.image.tag=${{ needs.semantic-version.outputs.semanticVersion }} \
          --set-string frontend.image.tag=${{ needs.semantic-version.outputs.semanticVersion }} \
          --set-string database.image.tag=${{ needs.semantic-version.outputs.semanticVersion }} \
          --set-string global.zone=dev \
          --set-string global.secrets.keycloakClientId="${{ secrets.KEYCLOAK_CLIENT_ID }}" \
          --set-string global.secrets.keycloakClientSecret="${{ secrets.KEYCLOAK_CLIENT_SECRET }}" \
          --set-string global.secrets.keycloakUrl="${{ secrets.KEYCLOAK_URL }}" \
          --set-string global.secrets.uiPrivateKey="${{ steps.generateKey.outputs.UI_PRIVATE_KEY }}" \
          --set-string global.secrets.uiPublicKey="${{ steps.generateKey.outputs.UI_PUBLIC_KEY }}" \
          --set-string global.secrets.databasePassword="${{ secrets.DATABASE_PWD }}" \
          --set-string global.secrets.databaseUser="${{ secrets.DATABASE_USER }}" \
          --set-string global.secrets.databaseName="${{ secrets.DATABASE_NAME }}"  \
          --set-string global.secrets.bceidWsUrl="${{ secrets.BCEID_WS_URL }}" \
          --set-string global.secrets.bceidWsAuthPassword="${{ secrets.BCEID_WS_BASIC_AUTH_PASSWORD }}" \
          --set-string global.secrets.bceidWsAuthUserName="${{ secrets.BCEID_WS_BASIC_AUTH_USERNAME }}" \
          --set-string global.secrets.bceidWsOnlineServiceId="${{ secrets.BCEID_WS_ONLINE_SERVICE_ID }}"  \
          --set-string global.serverFrontend="https://dev.paytransparency.fin.gov.bc.ca" \
          --timeout 10m charts/fin-pay-transparency
      - name: Penetration Test
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: https://${{ env.deployment_name }}-frontend-dev.apps.silver.devops.gov.bc.ca
          cmd_options: "-a"
          fail_action: false
          allow_issue_writing: false


