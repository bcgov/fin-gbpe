name: Deploy to PROD On Workflow Dispatch.
env:
  deployment_name: pay-transparency
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'The Docker Tag to deploy, it would be the latest tagged version that you want to deploy from TEST to PROD.'
        required: true
      release_notes:
        description: 'The release notes for the release.'
        required: true
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  image-promotions-to-prod: # This is just for adding another tag to the image to reflect which docker tag is deployed to PROD.
    name: Image Promotions to PROD
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    strategy:
      matrix:
        package: [backend, database, database-migrations, frontend]
    steps:
      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.package }}
          target: "${{ github.event.inputs.tag }}"
          tags: prod
  deploys:
    name: Deploys
    needs: image-promotions-to-prod
    environment: prod
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: generate private and public key
        id: generateKey
        shell: bash
        run: |
          EOF=" "
          ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key -q -N ""
          openssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub
          UI_PRIVATE_KEY_VAL=$(cat jwtRS256.key)
          UI_PUBLIC_KEY_VAL=$(cat jwtRS256.key.pub)
          echo "UI_PUBLIC_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PUBLIC_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          
          echo "UI_PRIVATE_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PRIVATE_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
      - name: Deploy to OpenShift
        shell: bash
        run: |
          # Allow pipefail, since we could be catching oc create errors
          set +o pipefail
          
          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}
          
          # Deploy Helm Chart
          helm upgrade --install --wait --atomic ${{ env.deployment_name }} \
          --values charts/fin-pay-transparency/values.yaml \
          --set-string backend.image.tag=${{ github.event.inputs.tag }} \
          --set-string frontend.image.tag=${{ github.event.inputs.tag }} \
          --set-string database.image.tag=${{ github.event.inputs.tag }} \
          --set-string global.zone=prod \
          --set-string global.secrets.keycloakClientId="${{ secrets.KEYCLOAK_CLIENT_ID }}" \
          --set-string global.secrets.keycloakClientSecret="${{ secrets.KEYCLOAK_CLIENT_SECRET }}" \
          --set-string global.secrets.keycloakUrl="${{ secrets.KEYCLOAK_URL }}" \
          --set-string global.secrets.uiPrivateKey="${{ steps.generateKey.outputs.UI_PRIVATE_KEY }}" \
          --set-string global.secrets.uiPublicKey="${{ steps.generateKey.outputs.UI_PUBLIC_KEY }}" \
          --set-string global.secrets.databasePassword="${{ secrets.DATABASE_PWD }}" \
          --set-string global.secrets.databaseUser="${{ secrets.DATABASE_USER }}" \
          --set-string global.secrets.databaseName="${{ secrets.DATABASE_NAME }}"  \
          --set-string global.secrets.bceidWsUrl="${{ secrets.BCEID_WS_URL }}" \
          --set-string global.secrets.bceidWsAuthPassword="${{ secrets.BCEID_WS_BASIC_AUTH_PASSWORD }}" \
          --set-string global.secrets.bceidWsAuthUserName="${{ secrets.BCEID_WS_BASIC_AUTH_USERNAME }}" \
          --set-string global.secrets.bceidWsOnlineServiceId="${{ secrets.BCEID_WS_ONLINE_SERVICE_ID }}"  \
          --set-string global.serverFrontend="https://paytransparency.fin.gov.bc.ca" \
          --timeout 10m charts/fin-pay-transparency
      - name: Penetration Test
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: https://${{ env.deployment_name }}-frontend-prod.apps.silver.devops.gov.bc.ca
          cmd_options: "-a"
          fail_action: false
          allow_issue_writing: false

      - name: Create Release
        uses: softprops/action-gh-release@v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          token: ${{ github.token }}
          tag_name: ${{ github.event.inputs.tag }}
          name: Release-${{ github.event.inputs.tag }}
          body: ${{ github.event.inputs.release_notes }}
