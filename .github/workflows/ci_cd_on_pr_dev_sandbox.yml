name: Build And Deploy to Sandbox in Dev namespace

on:
  pull_request:
    branches:
      - main

concurrency:
  # PR open and close use the same group, allowing only one at a time
  group: pr-${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  builds:
    if: '!github.event.pull_request.head.repo.fork'
    name: Build Containers for OpenShift Deployment
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    strategy:
      matrix:
        package: [backend, database, database-migrations, frontend]
        include:
          - package: backend
            triggers: ('backend/')
            build_file: ./backend/Dockerfile
            build_context: ./backend
          - package: database
            triggers: ('database/')
            build_file: ./database/Dockerfile
            build_context: ./database
          - package: frontend
            triggers: ('frontend/')
            build_file: ./frontend/Dockerfile
            build_context: ./frontend
          - package: database-migrations
            triggers: ('backend/db')
            build_file: ./backend/db/Dockerfile
            build_context: ./backend/db

    steps:
      - uses: actions/checkout@v3
      - uses: bcgov-nr/action-builder-ghcr@v1.3.0
        with:
          package: ${{ matrix.package }}
          tag: ${{ github.event.number }}
          tag_fallback: test
          token: ${{ secrets.GITHUB_TOKEN }}
          triggers: ${{ matrix.triggers }}
          build_file: ${{ matrix.build_file }}
          build_context: ${{ matrix.build_context }}

      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.package }}
          target: ${{ github.event.number }}
          tags: |
            pr-${{ github.event.number }}
            ${{ github.sha }}
            ${{ github.event.number }}


  deploys:
    if: '!github.event.pull_request.head.repo.fork'
    name: Deploys
    environment: dev
    needs:
      - builds
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: generate private and public key
        id: generateKey
        shell: bash
        run: |
          EOF=" "
          ssh-keygen -t rsa -b 4096 -m PEM -f jwtRS256.key -q -N ""
          openssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub
          UI_PRIVATE_KEY_VAL=$(cat jwtRS256.key)
          UI_PUBLIC_KEY_VAL=$(cat jwtRS256.key.pub)
          echo "UI_PUBLIC_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PUBLIC_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          
          echo "UI_PRIVATE_KEY<<$EOF" >> $GITHUB_OUTPUT
          echo "$UI_PRIVATE_KEY_VAL" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
      - name: Deploy to OpenShift
        shell: bash
        run: |
          # Allow pipefail, since we could be catching oc create errors
          set +o pipefail
          
          # Login to OpenShift (NOTE: project command is a safeguard)
          oc login --token=${{ secrets.oc_token }} --server=${{ vars.oc_server }}
          oc project ${{ vars.oc_namespace }}
          
          # Deploy Helm Chart
          helm upgrade --install --wait --atomic pay-transparency-${{ github.event.number }} --values charts/fin-pay-transparency/values-pr.yaml  --set backend.image.tag=${{ github.sha }} --set frontend.image.tag=${{ github.sha }} --set database.image.tag=pr-${{ github.event.number }} --set global.zone="pr-${{ github.event.number }}" --set global.secrets.keycloakClientId="${{ secrets.KEYCLOAK_CLIENT_ID }}" --set global.secrets.keycloakClientSecret="${{ secrets.KEYCLOAK_CLIENT_SECRET }}" --set global.secrets.keycloakUrl="${{ secrets.KEYCLOAK_URL }}" --set global.secrets.uiPrivateKey="${{ steps.generateKey.outputs.UI_PRIVATE_KEY }}" --set global.secrets.uiPublicKey="${{ steps.generateKey.outputs.UI_PUBLIC_KEY }}" --set global.secrets.databasePassword="${{ secrets.DATABASE_PWD }}" --set global.secrets.databaseUser="${{ secrets.DATABASE_USER }}" --set global.secrets.databaseName="${{ secrets.DATABASE_NAME }}"  --timeout 10m charts/fin-pay-transparency

